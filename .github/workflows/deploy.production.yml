name: Deploy Langfuse

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment (e.g. staging, production)'
        required: true
        type: string

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ inputs.environment }}
      ACR_LOGIN_SERVER: ${{ vars.ACR_NAME }}.azurecr.io
    outputs:
      WEB_IMAGE: ${{ steps.set-web-image.outputs.image }}
      WORKER_IMAGE: ${{ steps.set-worker-image.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ vars.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push langfuse-web image
        id: set-web-image
        run: |
          WEB_IMAGE=${{ env.ACR_LOGIN_SERVER }}/langfuse-web:${{ env.ENVIRONMENT }}-latest
          docker-compose build langfuse-web
          docker tag langfuse-web $WEB_IMAGE
          docker push $WEB_IMAGE
          echo "::set-output name=image::$WEB_IMAGE"

      - name: Build and push langfuse-worker image
        id: set-worker-image
        run: |
          WORKER_IMAGE=${{ env.ACR_LOGIN_SERVER }}/langfuse-worker:${{ env.ENVIRONMENT }}-latest
          docker-compose build langfuse-worker
          docker tag langfuse-worker $WORKER_IMAGE
          docker push $WORKER_IMAGE
          echo "::set-output name=image::$WORKER_IMAGE"

  deploy-to-aks:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: |
          az aks get-credentials \
            --resource-group <YOUR_RESOURCE_GROUP> \
            --name <YOUR_AKS_CLUSTER> \
            --overwrite-existing

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ inputs.environment }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create image pull secret
        run: |
          kubectl create secret docker-registry acr-pull-secret \
            --docker-server=${{ env.ACR_LOGIN_SERVER }} \
            --docker-username=${{ vars.ACR_USERNAME }} \
            --docker-password=${{ secrets.ACR_PASSWORD }} \
            -n ${{ inputs.environment }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply environment secret manifest
        run: |
          kubectl apply -f k8s/langfuse-env-secret.yaml -n ${{ inputs.environment }}

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/service.yaml -n ${{ inputs.environment }}
          kubectl apply -f k8s/ingress.yaml -n ${{ inputs.environment }}
          kubectl apply -f k8s/deployment.yaml -n ${{ inputs.environment }}
          kubectl apply -f k8s/worker-deployment.yaml -n ${{ inputs.environment }}

      - name: Update langfuse-web deployment image
        run: |
          kubectl set image deployment/langfuse-web langfuse-web=${{ needs.build-and-push.outputs.WEB_IMAGE }} -n ${{ inputs.environment }}

      - name: Update langfuse-worker deployment image
        run: |
          kubectl set image deployment/langfuse-worker langfuse-worker=${{ needs.build-and-push.outputs.WORKER_IMAGE }} -n ${{ inputs.environment }}

      - name: Wait for langfuse-web rollout
        run: |
          kubectl rollout status deployment/langfuse-web -n ${{ inputs.environment }} --timeout=5m

      - name: Wait for langfuse-worker rollout
        run: |
          kubectl rollout status deployment/langfuse-worker -n ${{ inputs.environment }} --timeout=5m
